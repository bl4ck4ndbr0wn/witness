{"version":3,"sources":["../../../src/services/demux/ActionHandler.js"],"names":["ActionHandler","AbstractActionHandler","constructor","updaters","effects","uri","mongoose","connect","useNewUrlParser","connection","on","console","info","error","bind","process","close","exit","handleWithState","handle","context","socket","io","getSocket","state","user","User","profile","Profile","blockIndexState","BlockIndexState","err","updateIndexState","block","isReplay","blockInfo","update","blockNumber","blockHash","upsert","exec","loadIndexState","indexState","findOne"],"mappings":"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","sourcesContent":["import { AbstractActionHandler } from \"demux\";\nimport mongoose from \"mongoose\";\nimport { User, Profile, BlockIndexState } from \"../../models\";\nimport io from \"../../utils/io\";\n\nclass ActionHandler extends AbstractActionHandler {\n  constructor(updaters, effects, uri) {\n    mongoose.connect(\n      uri,\n      { useNewUrlParser: true }\n    );\n\n    // CONNECTION EVENTS\n    // Connection successful\n    mongoose.connection.on(\"connected\", () => {\n      console.info(`Mongoose default connection open to ${uri}`);\n    });\n\n    // Connection throws an error\n    mongoose.connection.on(\n      \"error\",\n      console.error.bind(console, \"Mongoose default connection error:\")\n    );\n\n    // Connection is disconnected\n    mongoose.connection.on(\"disconnected\", () => {\n      console.info(\"Mongoose default connection disconnected\");\n    });\n\n    // Close the connection if the node process is terminated\n    process.on(\"SIGINT\", () => {\n      mongoose.connection.close(() => {\n        console.info(\n          \"Mongoose default connection disconnected through app termination\"\n        );\n        process.exit(0);\n      });\n    });\n\n    super(updaters, effects);\n  }\n\n  async handleWithState(handle) {\n    const context = { socket: io.getSocket() };\n    const state = {\n      user: User,\n      profile: Profile,\n      blockIndexState: BlockIndexState\n    };\n    try {\n      await handle(state, context);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  async updateIndexState(state, block, isReplay) {\n    const { blockInfo } = block;\n    try {\n      await state.blockIndexState\n        .update(\n          {},\n          {\n            blockNumber: blockInfo.blockNumber,\n            blockHash: blockInfo.blockHash,\n            isReplay\n          },\n          { upsert: true }\n        )\n        .exec();\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  async loadIndexState() {\n    try {\n      let blockHash;\n      let blockNumber;\n      const indexState = await BlockIndexState.findOne({}).exec();\n      if (indexState) {\n        ({ blockHash, blockNumber } = indexState);\n      }\n      if (blockNumber && blockHash) {\n        return { blockNumber, blockHash };\n      }\n      return { blockNumber: 0, blockHash: \"\" };\n    } catch (err) {\n      console.error(err);\n    }\n  }\n}\n\nexport default ActionHandler;\n"],"file":"ActionHandler.js"}